//1 (fibonacci)

programa {
  funcao inicio() {

    inteiro n

    escreva("Insira o numero: ")
    leia(n)
    fibonacci(n)

    
  }

  funcao inteiro fibonacci(inteiro numero){
    inteiro teste, i, f1, f2, f3

    f1 = 0
    f2 = 1
    f3 = 0

    para (i = 0; i <= numero; i++){
      f3 = f1 + f2
      escreva(f3, " | ")
      f1 = f2
      f2 = f3
    }
    retorne teste
  }
}


//2 

programa {
  inclua biblioteca Util

  funcao inicio() {
    inteiro n, adv

    adv = Util.sorteia(1, 100)

    escreva("Tente adivinhar o número: ")
    leia(n)

    enquanto(n != adv){
      escreva(adv, "\n")
      se(n > adv){
        escreva("O numero é menor \n")
      }
      senao{
        escreva("O numero é maior \n")
      }
      leia(n)
    }

    escreva("Correto, o número era ", adv)
  }
}


//3

programa {

  funcao conta(inteiro base, inteiro expo){
    inteiro resultado, i
    
    resultado = 1

    para(i = 1; i <= expo; i++){
      resultado = resultado * base
    }
    escreva(resultado)
    
  }
  funcao inicio() {
    inteiro base, expo

    escreva("Base\n")
    leia(base)
    escreva("Exponencial\n")
    leia(expo)
    
    escreva("Resultado: "conta(base, expo))
  }
}


//4

programa {
  funcao inicio() {
    cadeia usuario, senha, usuarioL, senhaL
    caracter res
    inteiro i

    escreva("Insira seu nome de usuario para o cadastro: ")
    leia(usuario)
    escreva("Insira sua senha para o cadastro: ")
    leia(senha)

    escreva("Usuario cadastrado!\n")
    escreva("Deseja fazer o login? (s / n): ")
    leia(res)

    i = 0

    se(res == "s"){
      enquanto(i <= 3){
        escreva("Insira seu nome de usario: ")
        leia(usuarioL)
        escreva("Insira sua senha: ")
        leia(senhaL)

        se(usuarioL == usuario){
          se(senhaL == senha){
            pare
          }
        }
        senao
          escreva("Usuario ou senha incorretos\n")
          i = i + 1
      }

      se(i == 3){
        escreva("Acesso bloqueado")
      }
      senao se(i != 3){
        escreva("Login feito com sucesso!")
      }
    }

    senao se(res == "n"){
      escreva("Programa encerrado")
    }
  }
}


//5

programa {
  funcao inicio() {
    inteiro n, i, j

    escreva("Digite o tamanho da matriz (N): ")
    leia(n)

    inteiro mat[n][n]

    para(i = 0; i < n; i++) {
      para(j = 0; j < n; j++) {
        escreva("Elemento [", i+1, "][", j+1, "]: ")
        leia(mat[i][j])
      }
    }

    se (verif(mat, n)) {
      escreva("A matriz é um quadrado mágico!")
    } senao {
      escreva("A matriz não é um quadrado mágico.")
    }
  }

  funcao logico verif(inteiro mat[][], inteiro n) {
    inteiro i, j
    inteiro somaReferencia = 0
    inteiro somaLinha, somaColuna, somaDiag1 = 0, somaDiag2 = 0

    para(j = 0; j < n; j++) {
      somaReferencia = somaReferencia + mat[0][j]
    }

    para(i = 0; i < n; i++) {
      somaLinha = 0
      somaColuna = 0

      para(j = 0; j < n; j++) {
        somaLinha = somaLinha + mat[i][j]
        somaColuna = somaColuna + mat[j][i]
      }

      se (somaLinha != somaReferencia){
        se (somaColuna != somaReferencia){
        retorne falso
        }
      }
    }

    para(i = 0; i < n; i++) {
      somaDiag1 = somaDiag1 + mat[i][i]
      somaDiag2 = somaDiag2 + mat[i][n - 1 - i]
    }
    se (somaDiag1 != somaReferencia) {
      se (somaDiag2 != somaReferencia){
      retorne falso
    }
    }
    retorne verdadeiro
  }
}

//6 CONSERTAR CODIGO

programa {
    funcao inicio() {
        inteiro numero
        
        escreva("Digite um número inteiro: ")
        leia(numero)
        
        escreva("Representação Binária: ", paraBinario(numero), "\n")
        escreva("Representação Hexadecimal: ", paraHexa(numero))
    }

    // Função para converter um número inteiro para binário
    funcao cadeia paraBinario(inteiro num) {
        cadeia binario = ""
        caracter teste
        
        se (num == 0) {
            retorne "0"
        }

        enquanto (num > 0) {
            teste = num % 2 + binario
            binario = teste + binario // Converte inteiro para caractere
            num = num / 2
        }
        
        retorne binario
    }

    // Função para converter um número inteiro para hexadecimal
    funcao cadeia paraHexa(inteiro num) {
        cadeia hexa = ""
        
        se (num == 0) {
            retorne "0"
        }

        enquanto (num > 0) {
            hexa = digitoHexa(num % 16) + hexa // Adiciona o caractere do resto à frente da string
            num = num / 16
        }
        
        retorne hexa
    }

    // Função auxiliar para converter um dígito para hexadecimal
    funcao caracter digitoHexa(inteiro digito) {
        caracter hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
        
        retorne hex[digito]
    }
}


// 7

